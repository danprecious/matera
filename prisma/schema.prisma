datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Tester {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  filename String
  file     String
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  email         String          @unique
  password      String
  name          String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  sessions      Session[]
  uploads       Material[]
  collections   Collection[]
  Authenticator Authenticator[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Material {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  programme    String
  semester     String
  materialType String
  fileId       String             @db.ObjectId
  file         File[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  uploaderId   String?            @db.ObjectId
  uploader     User?              @relation(fields: [uploaderId], references: [id])
  categories   MaterialCategory[]

  collections CollectionMaterial[]
}

model File {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  gridFsId   String
  filename   String
  mimetype   String
  size       Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  materialId String   @db.ObjectId // Reference to the material this file belongs to
  material   Material @relation(fields: [materialId], references: [id])
}

model Category {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  name          String             @unique
  materials     MaterialCategory[]
  parentId      String?            @db.ObjectId
  parent        Category?          @relation("Subcategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subcategories Category[]         @relation("Subcategories")
}

model Collection {
  id          String               @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  userId      String               @db.ObjectId
  user        User                 @relation(fields: [userId], references: [id])
  materials   CollectionMaterial[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

// Join table for many-to-many relation between Material and Category
model MaterialCategory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  materialId String   @db.ObjectId
  categoryId String   @db.ObjectId
  material   Material @relation(fields: [materialId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([materialId, categoryId])
}

// Join table for many-to-many relation between PastQuestion and Category

model CollectionMaterial {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  materialId   String     @db.ObjectId
  collectionId String     @db.ObjectId
  material     Material   @relation(fields: [materialId], references: [id], onDelete: Cascade)
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([materialId, collectionId])
}
